/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	configv1 "github.com/openshift/api/config/v1"
	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ClusterConfigurationApplyConfiguration represents an declarative configuration of the ClusterConfiguration type for use
// with apply.
type ClusterConfigurationApplyConfiguration struct {
	SecretRefs     []v1.LocalObjectReference    `json:"secretRefs,omitempty"`
	ConfigMapRefs  []v1.LocalObjectReference    `json:"configMapRefs,omitempty"`
	Items          []runtime.RawExtension       `json:"items,omitempty"`
	APIServer      *configv1.APIServerSpec      `json:"apiServer,omitempty"`
	Authentication *configv1.AuthenticationSpec `json:"authentication,omitempty"`
	FeatureGate    *configv1.FeatureGateSpec    `json:"featureGate,omitempty"`
	Image          *configv1.ImageSpec          `json:"image,omitempty"`
	Ingress        *configv1.IngressSpec        `json:"ingress,omitempty"`
	Network        *configv1.NetworkSpec        `json:"network,omitempty"`
	OAuth          *configv1.OAuthSpec          `json:"oauth,omitempty"`
	OperatorHub    *configv1.OperatorHubSpec    `json:"operatorhub,omitempty"`
	Scheduler      *configv1.SchedulerSpec      `json:"scheduler,omitempty"`
	Proxy          *configv1.ProxySpec          `json:"proxy,omitempty"`
}

// ClusterConfigurationApplyConfiguration constructs an declarative configuration of the ClusterConfiguration type for use with
// apply.
func ClusterConfiguration() *ClusterConfigurationApplyConfiguration {
	return &ClusterConfigurationApplyConfiguration{}
}

// WithSecretRefs adds the given value to the SecretRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SecretRefs field.
func (b *ClusterConfigurationApplyConfiguration) WithSecretRefs(values ...v1.LocalObjectReference) *ClusterConfigurationApplyConfiguration {
	for i := range values {
		b.SecretRefs = append(b.SecretRefs, values[i])
	}
	return b
}

// WithConfigMapRefs adds the given value to the ConfigMapRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConfigMapRefs field.
func (b *ClusterConfigurationApplyConfiguration) WithConfigMapRefs(values ...v1.LocalObjectReference) *ClusterConfigurationApplyConfiguration {
	for i := range values {
		b.ConfigMapRefs = append(b.ConfigMapRefs, values[i])
	}
	return b
}

// WithItems adds the given value to the Items field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Items field.
func (b *ClusterConfigurationApplyConfiguration) WithItems(values ...runtime.RawExtension) *ClusterConfigurationApplyConfiguration {
	for i := range values {
		b.Items = append(b.Items, values[i])
	}
	return b
}

// WithAPIServer sets the APIServer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIServer field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithAPIServer(value configv1.APIServerSpec) *ClusterConfigurationApplyConfiguration {
	b.APIServer = &value
	return b
}

// WithAuthentication sets the Authentication field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Authentication field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithAuthentication(value configv1.AuthenticationSpec) *ClusterConfigurationApplyConfiguration {
	b.Authentication = &value
	return b
}

// WithFeatureGate sets the FeatureGate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FeatureGate field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithFeatureGate(value configv1.FeatureGateSpec) *ClusterConfigurationApplyConfiguration {
	b.FeatureGate = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithImage(value configv1.ImageSpec) *ClusterConfigurationApplyConfiguration {
	b.Image = &value
	return b
}

// WithIngress sets the Ingress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ingress field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithIngress(value configv1.IngressSpec) *ClusterConfigurationApplyConfiguration {
	b.Ingress = &value
	return b
}

// WithNetwork sets the Network field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Network field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithNetwork(value configv1.NetworkSpec) *ClusterConfigurationApplyConfiguration {
	b.Network = &value
	return b
}

// WithOAuth sets the OAuth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OAuth field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithOAuth(value configv1.OAuthSpec) *ClusterConfigurationApplyConfiguration {
	b.OAuth = &value
	return b
}

// WithOperatorHub sets the OperatorHub field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OperatorHub field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithOperatorHub(value configv1.OperatorHubSpec) *ClusterConfigurationApplyConfiguration {
	b.OperatorHub = &value
	return b
}

// WithScheduler sets the Scheduler field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scheduler field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithScheduler(value configv1.SchedulerSpec) *ClusterConfigurationApplyConfiguration {
	b.Scheduler = &value
	return b
}

// WithProxy sets the Proxy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Proxy field is set to the value of the last call.
func (b *ClusterConfigurationApplyConfiguration) WithProxy(value configv1.ProxySpec) *ClusterConfigurationApplyConfiguration {
	b.Proxy = &value
	return b
}
